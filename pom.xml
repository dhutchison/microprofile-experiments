<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.devwithimagination.microprofile</groupId>
  <artifactId>experiments</artifactId>
  <version>0.3-SNAPSHOT</version>
  <packaging>war</packaging>
  <properties>

    <!-- Set consistent encodings -->
    <file.encoding>UTF-8</file.encoding>
    <project.build.sourceEncoding>${file.encoding}</project.build.sourceEncoding>
    <project.reporting.outputEncoding>${file.encoding}</project.reporting.outputEncoding>

    <!-- Set our java version -->
    <java.version>11</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>


    <failOnMissingWebXml>false</failOnMissingWebXml>

    <dependency.check.plugin.version>5.3.0</dependency.check.plugin.version>

    <maven.dependency.plugin.version>3.1.2</maven.dependency.plugin.version>

    <!-- Need to be above 3.0.0-M3 to support Java 11 -->
    <maven.surefire.version>3.0.0-M4</maven.surefire.version>
    <maven.failsafe.version>3.0.0-M4</maven.failsafe.version>

    <cxf.client.version>3.3.6</cxf.client.version>
    <mp.rest.client.version>1.3.3</mp.rest.client.version>
    <payara.version>5.201</payara.version>
    <payaramicro.maven.plugin.version>1.0.7</payaramicro.maven.plugin.version>
    <flyway.version>6.4.1</flyway.version>
    <log.version>2.12.1</log.version>
    <jacoco.plugin.version>0.8.5</jacoco.plugin.version>

    <!-- Properties for the docker plugin setup -->
    <docker.maven.plugin.version>0.33.0</docker.maven.plugin.version>

    <!-- Properties for dependencies -->
    <!-- Must be listed in the dependencies section otherwise it will be null. -->
    <jacoco.agent.path>${org.jacoco:org.jacoco.agent:jar:runtime}</jacoco.agent.path>

  </properties>

  <dependencyManagement>
    <dependencies>

      <!-- Logging related items -->
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-parent</artifactId>
        <version>1.7.30</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Testing Related Items -->
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>5.6.2</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>1.14.1</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.microprofile</groupId>
      <artifactId>microprofile</artifactId>
      <version>2.1</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <!-- Additional JCache API -->
    <dependency>
      <groupId>javax.cache</groupId>
      <artifactId>cache-api</artifactId>
      <version>1.0.0</version>
      <scope>provided</scope>
    </dependency>

    <!-- Database driver -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>42.2.9</version>
      <type>jar</type>
    </dependency>

    <!-- For generating fake test data -->
    <dependency>
      <groupId>com.github.javafaker</groupId>
      <artifactId>javafaker</artifactId>
      <version>0.12</version>
    </dependency>

    <!-- Logging related items -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
    </dependency>


    <!-- Testing -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.nimbusds</groupId>
      <artifactId>nimbus-jose-jwt</artifactId>
      <version>7.9</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <version>2.25.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpkix-jdk15on</artifactId>
      <version>1.65</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j18-impl</artifactId>
      <version>${log.version}</version>
      <scope>test</scope>
    </dependency>
    <!-- Test rest client implementations-->
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-rs-mp-client</artifactId>
      <version>${cxf.client.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.microprofile.rest.client</groupId>
      <artifactId>microprofile-rest-client-api</artifactId>
      <version>${mp.rest.client.version}</version>
      <scope>test</scope>
    </dependency>
    <!--Test database components-->
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
      <version>${flyway.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Coverage agent -->
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.agent</artifactId>
      <version>${jacoco.plugin.version}</version>
      <classifier>runtime</classifier>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>${project.artifactId}</finalName>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.sonatype.ossindex.maven</groupId>
          <artifactId>ossindex-maven-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Configure Git Hooks -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.6.0</version>
        <executions>
          <execution>
            <id>install-git-hooks</id>
            <phase>initialize</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>pre-commit</executable>
              <arguments>
                <argument>install</argument>
                <argument>-t</argument>
                <argument>pre-commit</argument>
                <argument>-t</argument>
                <argument>commit-msg</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>

      </plugin>

      <!-- Enforcement rules -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>3.0.0-M3</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <bannedPlugins>
                  <!-- will only display a warning but does not fail the build. -->
                  <level>WARN</level>
                  <excludes>
                    <exclude>org.apache.maven.plugins:maven-verifier-plugin</exclude>
                  </excludes>
                  <message>Please consider using the maven-invoker-plugin (http://maven.apache.org/plugins/maven-invoker-plugin/)!</message>
                </bannedPlugins>
                <requireMavenVersion>
                  <version>3.6</version>
                </requireMavenVersion>
                <requireJavaVersion>
                  <version>11</version>
                </requireJavaVersion>
                <requireOS>
                  <family>unix</family>
                </requireOS>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>2.8.2</version>
      </plugin>
      <plugin>
        <groupId>org.sonatype.ossindex.maven</groupId>
        <artifactId>ossindex-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>audit-dependencies</id>
            <phase>validate</phase>
            <goals>
              <goal>audit</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <!-- Needed to process property links to dependencies.
           See https://stackoverflow.com/a/6934552/230449 -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven.dependency.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- When multiple plugins are configured for a phase, 
          they are executed in the order they appear in the pom, 
          so put this before Jacoco so this plugin completes 
          post-integration-test first. 
          Initially these had been the other way around when
          we were trying to use the failsafeArgLine, but this failed
        -->
      <plugin>
        <groupId>fish.payara.maven.plugins</groupId>
        <artifactId>payara-micro-maven-plugin</artifactId>
        <version>${payaramicro.maven.plugin.version}</version>
        <executions>
          <execution>
            <id>package-payara</id>
            <phase>package</phase>
            <goals>
              <goal>bundle</goal>
            </goals>
          </execution>
          <execution>
            <id>start-payara</id>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>pre-integration-payara</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <daemon>true</daemon>
            </configuration>
          </execution>
          <execution>
            <id>post-integration-payara</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <payaraVersion>${payara.version}</payaraVersion>

          <deployWar>true</deployWar>

          <contextRoot>/</contextRoot>

          <javaCommandLineOptions>
            <!-- Java 9+ options -->
            <option>
              <key>--add-opens</key>
              <value>java.base/jdk.internal.loader=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-opens</key>
              <value>jdk.management/com.sun.management.internal=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-exports</key>
              <value>java.base/jdk.internal.ref=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-opens</key>
              <value>java.base/java.lang=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-opens</key>
              <value>java.base/java.nio=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-opens</key>
              <value>java.base/sun.nio.ch=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-opens</key>
              <value>java.management/sun.management=ALL-UNNAMED</value>
            </option>
            <option>
              <key>--add-opens</key>
              <value>java.base/sun.net.www.protocol.jrt=ALL-UNNAMED</value>
            </option>
            <!-- When running our integration tests, attach the jacoco agent -->
            <option>
              <value>-javaagent:${jacoco.agent.path}=destfile=target/coverage-reports/jacoco-it.exec,append=true</value>
            </option>
          </javaCommandLineOptions>
          <commandLineOptions>
            <option>
              <key>--postbootcommandfile</key>
              <value>src/main/resources/post-boot-commands.txt</value>
            </option>
            <option>
              <key>--maxhttpthreads</key>
              <value>100</value>
            </option>
          </commandLineOptions>
        </configuration>
      </plugin>
      <plugin>

        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco.plugin.version}</version>

        <executions>

          <!--
              Prepares the property pointing to the JaCoCo runtime agent which
              is passed as VM argument when Maven the Surefire plugin is executed.
          -->
          <execution>
            <id>pre-unit-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
              <!--
                  Sets the name of the property containing the settings
                  for JaCoCo runtime agent.
              -->
              <propertyName>surefireArgLine</propertyName>
            </configuration>
          </execution>
          <!--
            Ensures that the code coverage report for unit tests is created after
            unit tests have been run.
          -->
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
              <!-- Sets the output directory for the code coverage report. -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
            </configuration>
          </execution>

          <!--
        Prepares the property pointing to the JaCoCo runtime agent which
        is passed as VM argument when Maven the Failsafe plugin is executed.
    -->
          <execution>
            <id>pre-integration-test</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
              <!--
                Sets the name of the property containing the settings
                for JaCoCo runtime agent.
            -->
              <propertyName>failsafeArgLine</propertyName>
            </configuration>
          </execution>
          <!--
        Ensures that the code coverage report for integration tests after
        integration tests have been run.
    -->
          <execution>
            <id>post-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
              <!-- Sets the output directory for the code coverage report. -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
            </configuration>
          </execution>
          <!-- create the combined report for UT and IT -->
          <execution>
            <id>merge-results</id>
            <phase>verify</phase>
            <goals>
              <goal>merge</goal>
            </goals>
            <configuration>
              <fileSets>
                <fileSet>
                  <directory>${project.build.directory}/coverage-reports</directory>
                  <includes>
                    <include>*.exec</include>
                  </includes>
                </fileSet>
              </fileSets>
              <destFile>${project.build.directory}/coverage-reports/aggregate.exec</destFile>
            </configuration>
          </execution>
          <execution>
            <id>post-merge-report</id>
            <phase>verify</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/coverage-reports/aggregate.exec</dataFile>
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-aggregate</outputDirectory>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <propertyName>jacoco.agent.argLine</propertyName>
          <skip>false</skip>
          <append>true</append>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.version}</version>
        <configuration>
          <!-- Sets the VM argument line used when unit tests are run. -->
          <argLine>${surefireArgLine}</argLine>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven.failsafe.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <!-- Sets the VM argument line used when integration tests are run. -->
              <argLine>${failsafeArgLine}</argLine>
              <!--
                  Skips integration tests if the value of skip.integration.tests property
                  is true
              -->
              <skipTests>${skip.integration.tests}</skipTests>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>

        <executions>
          <execution>
            <id>prepare-it-database</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <images>
                <!-- Postgres database -->
                <image>
                  <name>postgres:12-alpine</name>
                  <alias>db</alias>
                  <run>
                    <env>
                      <POSTGRES_USER>postgres</POSTGRES_USER>
                      <POSTGRES_PASSWORD>example</POSTGRES_PASSWORD>
                      <POSTGRES_DB>postgres</POSTGRES_DB>
                    </env>
                    <ports>
                      <!-- this format would use "it-database.port"
                      as a maven property, or if undefined set a port -->
                      <!-- <port>it-database.port:5432</port> -->
                      <port>5432:5432</port>
                    </ports>
                    <wait>
                      <log>(?s)database system is ready to accept connections.*database system is ready to accept connections</log>
                      <time>10000</time>
                    </wait>
                  </run>
                </image>
                <!-- Use flyway to provision the database -->
                <image>
                  <name>flyway/flyway</name>
                  <alias>database-provision</alias>
                  <run>
                    <cmd>-url=jdbc:postgresql://db:5432/postgres -schemas=public -user=postgres -password=example -connectRetries=10 migrate</cmd>
                    <volumes>
                      <bind>
                        <volume>./src/test/resources/db/schema:/flyway/sql</volume>
                      </bind>
                    </volumes>
                    <dependsOn>
                      <container>db</container>
                    </dependsOn>
                    <wait>
                      <exit>0</exit>
                      <time>100000</time>
                    </wait>
                    <log>
                      <prefix>FLYWAY </prefix>
                      <date>default</date>
                      <color>cyan</color>
                    </log>
                    <!-- This should be deprecated, but won't connect to the other container 
                       without it -->
                    <links>
                      <link>db:db</link>
                    </links>
                  </run>
                </image>
              </images>
            </configuration>
          </execution>
          <execution>
            <id>remove-it-database</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>


  <profiles>
    <profile>
      <!-- Profile for linux/mac specific operations -->
      <id>linux-or-mac</id>
      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>
      <build>
        <plugins>
          <!-- Configure Git Hooks -->
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>1.6.0</version>
            <executions>
              <!-- Depending on the system setup we may need to change permissions
                   of the files that will be mounted into the container for flyway
              -->

              <execution>
                <id>correct-sql-directory-permissions</id>
                <phase>initialize</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>chmod</executable>
                  <arguments>
                    <argument>755</argument>
                    <argument>src/test/resources/db/schema</argument>
                  </arguments>
                </configuration>
              </execution>

              <execution>
                <id>correct-sql-file-permissions</id>
                <phase>initialize</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <!-- 
                    need to cheat to use wildcards
                    https://stackoverflow.com/a/29636165/230449
                  -->
                  <executable>bash</executable>
                  <arguments>
                    <argument>-c</argument>
                    <argument>chmod 644 src/test/resources/db/schema/*.sql</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

  </profiles>

  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>${maven.failsafe.version}</version>
        <reportSets>
          <reportSet>
            <id>integration-tests</id>
            <reports>
              <report>failsafe-report-only</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

</project>